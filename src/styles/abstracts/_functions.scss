@function image($path, $base: $base-asset-url) {
  @return url($base + $path);
}

@function font($path, $base: $base-asset-url) {
  @return url($base + "fonts/" + $path);
}

@function vw($n) {
  @return ($n / $width) * 100vw;
}

@function percent($value, $width) {
  @return ($value / $width) * 100%;
}

@function parse-int($n) {
  @return $n / ($n * 0 + 1);
}

@function fluid-font($target, $min: null, $max: null, $base: 1920) {
  $vw-value: calc(100vw * #{parse-int($target)} / #{$base});

  @if $min != null and $max != null {
    @return clamp($min, #{$vw-value}, $max);
  } @else if $min != null and $max == null {
    @return clamp($min, #{$vw-value}, #{$target});
  } @else if $min == null and $max != null {
    @return clamp(#{$target}, #{$vw-value}, $max);
  } @else {
    @return $vw-value;
  }
}

@function text-contrast(
  $color,
  $color-light: $color-white,
  $color-dark: $color-black
) {
  @if (type-of($color) != "color") {
    @warn '존재하지 않는 색상입니다.';
    @return null;
  }

  $brightness: round(
    (red($color) * 299) + (green($color) * 587) + (blue($color) * 114) / 1000
  );
  $light: round(
    (red(white) * 299) + (green(white) * 587) + (blue(white) * 114) / 1000
  );

  @if (abs($brightness) < ($light / 2)) {
    @return $color-light;
  } @else {
    @return $color-dark;
  }
}

@function rem-separator($list, $separator: false) {
  @if ($separator == "comma" or $separator == "space") {
    @return append($list, null, $separator);
  }

  @if (function-exists("list-separator") == true) {
    @return list-separator($list);
  }

  $test-list: ();

  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if (
      type-of($value) == "number" and unit($value) == "rem" and $to == "px"
    ) {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if
      (type-of($value) == "number" and unit($value) == "px" and $to == "rem")
    {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if (type-of($value) == "list") {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if ($rem-px-only) {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}
